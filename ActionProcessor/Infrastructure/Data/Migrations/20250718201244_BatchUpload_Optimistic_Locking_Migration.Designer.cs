// <auto-generated />
using System;
using ActionProcessor.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ActionProcessor.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ActionProcessorDbContext))]
    [Migration("20250718201244_BatchUpload_Optimistic_Locking_Migration")]
    partial class BatchUpload_Optimistic_Locking_Migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ActionProcessor.Domain.Entities.BatchUpload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("error_message");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("file_name");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint")
                        .HasColumnName("file_size_bytes");

                    b.Property<string>("OriginalFileName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("original_file_name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<int>("TotalEvents")
                        .HasColumnType("integer")
                        .HasColumnName("total_events");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("user_email");

                    b.HasKey("Id")
                        .HasName("pk_batch_uploads");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("ix_batch_uploads_created_at");

                    b.HasIndex("Status")
                        .HasDatabaseName("ix_batch_uploads_status");

                    b.HasIndex("UserEmail")
                        .HasDatabaseName("ix_batch_uploads_user_email");

                    b.HasIndex("UserEmail", "CreatedAt")
                        .HasDatabaseName("ix_batch_uploads_user_email_created_at");

                    b.ToTable("batch_uploads", (string)null);
                });

            modelBuilder.Entity("ActionProcessor.Domain.Entities.ProcessingEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("action_type");

                    b.Property<Guid>("BatchId")
                        .HasColumnType("uuid")
                        .HasColumnName("batch_id");

                    b.Property<string>("ClientIdentifier")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("client_identifier");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("completed_at");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Document")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("document");

                    b.Property<string>("ErrorMessage")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("error_message");

                    b.Property<string>("ResponseData")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)")
                        .HasColumnName("response_data");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer")
                        .HasColumnName("retry_count");

                    b.Property<string>("SideEffectsJson")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("side_effects_json");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("Id")
                        .HasName("pk_processing_events");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("ix_processing_events_action_type");

                    b.HasIndex("BatchId")
                        .HasDatabaseName("ix_processing_events_batch_id");

                    b.HasIndex("Document", "ClientIdentifier")
                        .HasDatabaseName("ix_processing_events_document_client_identifier");

                    b.HasIndex("Status", "CreatedAt")
                        .HasDatabaseName("ix_processing_events_status_created_at");

                    b.ToTable("processing_events", (string)null);
                });

            modelBuilder.Entity("ActionProcessor.Domain.Entities.ProcessingEvent", b =>
                {
                    b.HasOne("ActionProcessor.Domain.Entities.BatchUpload", "Batch")
                        .WithMany("Events")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_processing_events_batch_uploads_batch_id");

                    b.Navigation("Batch");
                });

            modelBuilder.Entity("ActionProcessor.Domain.Entities.BatchUpload", b =>
                {
                    b.Navigation("Events");
                });
#pragma warning restore 612, 618
        }
    }
}
